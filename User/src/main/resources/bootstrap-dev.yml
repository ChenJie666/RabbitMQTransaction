spring:
  jpa:
    #配置数据库类型
    database: MYSQL
    #指定数据库的引擎
    database-platform: org.hibernate.dialect.MySQL57Dialect
    #配置是否打印sql
    show-sql: true
    #Hibernate相关配置
    hibernate:
      #配置级联等级
      #      ddl-auto: create
      ddl-auto: update
    open-in-view: false
  #  jackson:
  #    property-naming-strategy: CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES
  rabbitmq:
    host: 192.168.32.207
    # addresses: # 配置集群的地址
    port: 5672
    username: guest
    password: guest
    virtual-host: /transaction_demo
    publisher-confirm-type: correlated
    publisher-returns: true
#    requested-heartbeat: # 指定心态超时，单位秒，0为不指定：默认60s
#    connection-timeout: # 连接超时，单位毫秒，0表示无穷大，不超时
#    cache:
#      channel:
#        size: # 缓存中保存的channel数量
#        checkout-timeout: # 当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创新一个新channel
#      connection:
#        size: # 缓存的链接数，只有是CONNECTION模式时生效
#        mode: # 连接工厂缓存模式：CHANNEL和CONNECTION
    template:
      mandatory: true
#      receive-timeout: # receive()操作的超时时间
#      reply-timeout: # sendAndReceive()操作的超时时间
#      retry:
#        enabled: # 发送重试是否可用
#        max-attempts: #最大重试次数
#        initial-interval: # 第一次和第二次尝试发布或传递消息之间的间隔
#        multiplier: # 应用于上一重试间隔的乘数
#        max-interval: # 最大重试时间间隔
    listener:
      simple:
        acknowledge-mode: manual
        retry:
          enabled: true # 开启重试
          max-attempts: 10 # 最大重试次数
          initial-interval: 2000ms # 重试间隔时间
#          multiplier: # 应用于上一重试间隔的乘数
#          max-interval: # 最大重试时间间隔
#          stateless: # 重试是有状态or无状态
#        auto-startup: # 是否启动时自动启动容器
#        concurrency: # 最小的消费者数量
#        max-concurrency: # 最大的消费者数量
#        prefetch: # 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量
#        transaction-size: # 指定一个事务处理的消息数量，最好小于等于prefetch的数量
#        default-requeue-rejected: # 决定被拒绝的消息是否重新入队，默认是true(与参数acknowledge-mode有关系)
#        idle-event-interval: # 多少长时间发布空闲容器时间，单位毫秒



management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
